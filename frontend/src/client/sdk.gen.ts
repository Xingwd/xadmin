// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-axios'
import type {
    LoginAccessTokenData,
    LoginAccessTokenResponse,
    LoginAccessTokenError,
    LoginTestTokenData,
    LoginTestTokenResponse,
    UsersReadUsersData,
    UsersReadUsersResponse,
    UsersReadUsersError,
    UsersCreateUserData,
    UsersCreateUserResponse,
    UsersCreateUserError,
    UsersReadUserHomeData,
    UsersReadUserHomeResponse,
    UsersReadUserOperationLogsData,
    UsersReadUserOperationLogsResponse,
    UsersReadUserOperationLogsError,
    UsersDeleteUserMeData,
    UsersDeleteUserMeResponse,
    UsersReadUserMeData,
    UsersReadUserMeResponse,
    UsersUpdateUserMeData,
    UsersUpdateUserMeResponse,
    UsersUpdateUserMeError,
    UsersRegisterUserData,
    UsersRegisterUserResponse,
    UsersRegisterUserError,
    UsersDeleteUserData,
    UsersDeleteUserResponse,
    UsersDeleteUserError,
    UsersReadUserByIdData,
    UsersReadUserByIdResponse,
    UsersReadUserByIdError,
    UsersUpdateUserData,
    UsersUpdateUserResponse,
    UsersUpdateUserError,
    RulesReadRulesData,
    RulesReadRulesResponse,
    RulesReadRulesError,
    RulesCreateRuleData,
    RulesCreateRuleResponse,
    RulesCreateRuleError,
    RulesReadPermissionsData,
    RulesReadPermissionsResponse,
    RulesReadPermissionsError,
    RulesDeleteRuleData,
    RulesDeleteRuleResponse,
    RulesDeleteRuleError,
    RulesReadRuleData,
    RulesReadRuleResponse,
    RulesReadRuleError,
    RulesUpdateRuleData,
    RulesUpdateRuleResponse,
    RulesUpdateRuleError,
    RolesReadRolesData,
    RolesReadRolesResponse,
    RolesReadRolesError,
    RolesCreateRoleData,
    RolesCreateRoleResponse,
    RolesCreateRoleError,
    RolesDeleteRoleData,
    RolesDeleteRoleResponse,
    RolesDeleteRoleError,
    RolesReadRoleData,
    RolesReadRoleResponse,
    RolesReadRoleError,
    RolesUpdateRoleData,
    RolesUpdateRoleResponse,
    RolesUpdateRoleError,
    OperationLogsReadOperationLogsData,
    OperationLogsReadOperationLogsResponse,
    OperationLogsReadOperationLogsError,
    OperationLogsSubmitOperationLogData,
    OperationLogsSubmitOperationLogResponse,
    OperationLogsSubmitOperationLogError,
    OperationLogsDeleteOperationLogData,
    OperationLogsDeleteOperationLogResponse,
    OperationLogsDeleteOperationLogError,
    OperationLogsReadOperationLogByIdData,
    OperationLogsReadOperationLogByIdResponse,
    OperationLogsReadOperationLogByIdError,
    UtilsHealthCheckData,
    UtilsHealthCheckResponse,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>
}

/**
 * Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginAccessToken = <ThrowOnError extends boolean = false>(options: Options<LoginAccessTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginAccessTokenResponse, LoginAccessTokenError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/v1/login/access-token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers,
        },
    })
}

/**
 * Test Token
 * Test access token
 */
export const loginTestToken = <ThrowOnError extends boolean = false>(options?: Options<LoginTestTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginTestTokenResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/login/test-token',
        ...options,
    })
}

/**
 * Read Users
 * Read users
 */
export const usersReadUsers = <ThrowOnError extends boolean = false>(options?: Options<UsersReadUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersReadUsersResponse, UsersReadUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/',
        ...options,
    })
}

/**
 * Create User
 * Create new user.
 */
export const usersCreateUser = <ThrowOnError extends boolean = false>(options: Options<UsersCreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCreateUserResponse, UsersCreateUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Read User Home
 * Read current user home data.
 */
export const usersReadUserHome = <ThrowOnError extends boolean = false>(options?: Options<UsersReadUserHomeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersReadUserHomeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/home',
        ...options,
    })
}

/**
 * Read User Operation Logs
 * Read current user operation logs.
 */
export const usersReadUserOperationLogs = <ThrowOnError extends boolean = false>(options?: Options<UsersReadUserOperationLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersReadUserOperationLogsResponse, UsersReadUserOperationLogsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/operation-logs',
        ...options,
    })
}

/**
 * Delete User Me
 * Delete own user.
 */
export const usersDeleteUserMe = <ThrowOnError extends boolean = false>(options?: Options<UsersDeleteUserMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<UsersDeleteUserMeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/me',
        ...options,
    })
}

/**
 * Read User Me
 * Read current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(options?: Options<UsersReadUserMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersReadUserMeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/me',
        ...options,
    })
}

/**
 * Update User Me
 * Update own user.
 */
export const usersUpdateUserMe = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserMeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersUpdateUserMeResponse, UsersUpdateUserMeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const usersRegisterUser = <ThrowOnError extends boolean = false>(options: Options<UsersRegisterUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersRegisterUserResponse, UsersRegisterUserError, ThrowOnError>({
        url: '/api/v1/users/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete User
 * Delete a user.
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteUserResponse, UsersDeleteUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/{id}',
        ...options,
    })
}

/**
 * Read User By Id
 * Read a specific user by id.
 */
export const usersReadUserById = <ThrowOnError extends boolean = false>(options: Options<UsersReadUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersReadUserByIdResponse, UsersReadUserByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/{id}',
        ...options,
    })
}

/**
 * Update User
 * Update a user.
 */
export const usersUpdateUser = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersUpdateUserResponse, UsersUpdateUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Read Rules
 * Read rules.
 */
export const rulesReadRules = <ThrowOnError extends boolean = false>(options?: Options<RulesReadRulesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RulesReadRulesResponse, RulesReadRulesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/rules/',
        ...options,
    })
}

/**
 * Create Rule
 * Create new rule.
 */
export const rulesCreateRule = <ThrowOnError extends boolean = false>(options: Options<RulesCreateRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RulesCreateRuleResponse, RulesCreateRuleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/rules/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Read Permissions
 * Read permissions.
 */
export const rulesReadPermissions = <ThrowOnError extends boolean = false>(options?: Options<RulesReadPermissionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RulesReadPermissionsResponse, RulesReadPermissionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/rules/permissions',
        ...options,
    })
}

/**
 * Delete Rule
 * Delete an rule.
 */
export const rulesDeleteRule = <ThrowOnError extends boolean = false>(options: Options<RulesDeleteRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RulesDeleteRuleResponse, RulesDeleteRuleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/rules/{id}',
        ...options,
    })
}

/**
 * Read Rule
 * Read a rule by id.
 */
export const rulesReadRule = <ThrowOnError extends boolean = false>(options: Options<RulesReadRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RulesReadRuleResponse, RulesReadRuleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/rules/{id}',
        ...options,
    })
}

/**
 * Update Rule
 * Update an rule.
 */
export const rulesUpdateRule = <ThrowOnError extends boolean = false>(options: Options<RulesUpdateRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RulesUpdateRuleResponse, RulesUpdateRuleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/rules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Read Roles
 * Read roles.
 */
export const rolesReadRoles = <ThrowOnError extends boolean = false>(options?: Options<RolesReadRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RolesReadRolesResponse, RolesReadRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/roles/',
        ...options,
    })
}

/**
 * Create Role
 * Create new role.
 */
export const rolesCreateRole = <ThrowOnError extends boolean = false>(options: Options<RolesCreateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RolesCreateRoleResponse, RolesCreateRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/roles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete Role
 * Delete a role.
 */
export const rolesDeleteRole = <ThrowOnError extends boolean = false>(options: Options<RolesDeleteRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RolesDeleteRoleResponse, RolesDeleteRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/roles/{id}',
        ...options,
    })
}

/**
 * Read Role
 * Read a role by id.
 */
export const rolesReadRole = <ThrowOnError extends boolean = false>(options: Options<RolesReadRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RolesReadRoleResponse, RolesReadRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/roles/{id}',
        ...options,
    })
}

/**
 * Update Role
 * Update a role.
 */
export const rolesUpdateRole = <ThrowOnError extends boolean = false>(options: Options<RolesUpdateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RolesUpdateRoleResponse, RolesUpdateRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/roles/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Read Operation Logs
 * Read operation logs
 */
export const operationLogsReadOperationLogs = <ThrowOnError extends boolean = false>(
    options?: Options<OperationLogsReadOperationLogsData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<OperationLogsReadOperationLogsResponse, OperationLogsReadOperationLogsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/operation-logs/',
        ...options,
    })
}

/**
 * Submit Operation Log
 * Proactively submit operation log. eg: Trigger the API to record operational logs upon accessing links or iframe menus in the frontend.
 */
export const operationLogsSubmitOperationLog = <ThrowOnError extends boolean = false>(
    options: Options<OperationLogsSubmitOperationLogData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<OperationLogsSubmitOperationLogResponse, OperationLogsSubmitOperationLogError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/operation-logs/submit',
        ...options,
    })
}

/**
 * Delete Operation Log
 * Delete a specific operation log.
 */
export const operationLogsDeleteOperationLog = <ThrowOnError extends boolean = false>(
    options: Options<OperationLogsDeleteOperationLogData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).delete<OperationLogsDeleteOperationLogResponse, OperationLogsDeleteOperationLogError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/operation-logs/{id}',
        ...options,
    })
}

/**
 * Read Operation Log By Id
 * Read a specific operation log by id.
 */
export const operationLogsReadOperationLogById = <ThrowOnError extends boolean = false>(
    options: Options<OperationLogsReadOperationLogByIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<OperationLogsReadOperationLogByIdResponse, OperationLogsReadOperationLogByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/operation-logs/{id}',
        ...options,
    })
}

/**
 * Health Check
 * Health check
 */
export const utilsHealthCheck = <ThrowOnError extends boolean = false>(options?: Options<UtilsHealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UtilsHealthCheckResponse, unknown, ThrowOnError>({
        url: '/api/v1/utils/health-check/',
        ...options,
    })
}
