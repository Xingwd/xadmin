// This file is auto-generated by @hey-api/openapi-ts

export type BodyLoginAccessToken = {
    grant_type?: string | null
    username: string
    password: string
    scope?: string
    client_id?: string | null
    client_secret?: string | null
}

export type HttpValidationError = {
    detail?: Array<ValidationError>
}

export type MenuItemType = 'tab' | 'link' | 'iframe'

export type Message = {
    message: string
}

export type OperationLogPublic = {
    user_id?: number | null
    username?: string | null
    name?: string | null
    title?: string | null
    request_method?: string | null
    request_path?: string | null
    request_query_params?: string | null
    response_status_code?: number | null
    id: string
    created_at: string
}

export type OperationLogsPublic = {
    data: Array<OperationLogPublic>
    total: number
}

export type OrderDirection = 'asc' | 'desc'

export type Permission = {
    name: string
    description: string
}

export type RoleCreate = {
    name: string
    permissions?: Array<number> | null
    users?: Array<number> | null
}

export type RolePublic = {
    name: string
    id: number
    created_at: string
    updated_at: string
    permissions?: Array<RoleRule> | null
    users?: Array<RoleUser> | null
}

export type RoleRule = {
    id: number
    name: string
    title: string
    parent_id: number | null
}

export type RoleUpdate = {
    name: string
    permissions?: Array<number> | null
    users?: Array<number> | null
}

export type RoleUser = {
    id: number
    username: string
}

export type RolesPublic = {
    data: Array<RolePublic>
}

export type RuleCreate = {
    parent_id?: number | null
    type: RuleType
    title: string
    /**
     * 将注册为前端路由名称，同时用作前后端鉴权。当type=RuleType.permission时，name和对应的后端接口权限名一致。
     */
    name: string
    path?: string | null
    icon?: string | null
    menu_item_type?: MenuItemType | null
    url?: string | null
    component?: string | null
    remark?: string | null
    cache?: boolean
    weight?: number
    status?: boolean
}

export type RuleTreePublic = {
    parent_id?: number | null
    type: RuleType
    title: string
    /**
     * 将注册为前端路由名称，同时用作前后端鉴权。当type=RuleType.permission时，name和对应的后端接口权限名一致。
     */
    name: string
    path?: string | null
    icon?: string | null
    menu_item_type?: MenuItemType | null
    url?: string | null
    component?: string | null
    remark?: string | null
    cache?: boolean
    weight?: number
    status?: boolean
    id: number
    created_at: string
    updated_at: string
    children?: Array<RuleTreePublic> | null
}

export type RuleTreesPublic = {
    data: Array<RuleTreePublic>
}

export type RuleType = 'menu_dir' | 'menu_item' | 'permission'

export type RuleUpdate = {
    parent_id?: number | null
    type?: RuleType | null
    title?: string | null
    name?: string | null
    path?: string | null
    icon?: string | null
    menu_item_type?: MenuItemType | null
    url?: string | null
    component?: string | null
    remark?: string | null
    cache?: boolean
    weight?: number
    status?: boolean
}

export type Token = {
    access_token: string
    token_type?: string
}

export type UserBehaviorCount = {
    dt: string
    behavior: string
    count: number
}

export type UserCreate = {
    username: string
    is_active?: boolean
    is_superuser?: boolean
    full_name?: string | null
    source?: UserSource
    password: string
    roles?: Array<number> | null
}

export type UserHome = {
    logins_1w?: number
    previous_logins_1w?: number
    logins_1m?: number
    previous_logins_1m?: number
    operations_1w?: number
    previous_operations_1w?: number
    operations_1m?: number
    previous_operations_1m?: number
    behavior_1w?: Array<UserBehaviorCount> | null
    behavior_1m?: Array<UserBehaviorCount> | null
    menus?: Array<UserMenuCount> | null
}

export type UserMePublic = {
    username: string
    is_active?: boolean
    is_superuser?: boolean
    full_name?: string | null
    source?: UserSource
    id: number
    last_login_at?: string | null
    created_at: string
    updated_at: string
    roles?: Array<UserRole> | null
    rules?: Array<UserRuleTreePublic>
}

export type UserMenuCount = {
    menu: string
    count: number
}

export type UserPublic = {
    username: string
    is_active?: boolean
    is_superuser?: boolean
    full_name?: string | null
    source?: UserSource
    id: number
    last_login_at?: string | null
    created_at: string
    updated_at: string
    roles?: Array<UserRole> | null
}

export type UserRegister = {
    username: string
    password: string
    full_name?: string | null
}

export type UserRole = {
    id: number
    name: string
}

export type UserRuleTreePublic = {
    parent_id?: number | null
    type: RuleType
    title: string
    /**
     * 将注册为前端路由名称，同时用作前后端鉴权。当type=RuleType.permission时，name和对应的后端接口权限名一致。
     */
    name: string
    path?: string | null
    icon?: string | null
    menu_item_type?: MenuItemType | null
    url?: string | null
    component?: string | null
    remark?: string | null
    cache?: boolean
    id: number
    children?: Array<UserRuleTreePublic> | null
}

export type UserSource = 'system' | 'signup'

export type UserUpdate = {
    username?: string | null
    is_active?: boolean
    is_superuser?: boolean
    full_name?: string | null
    source?: UserSource
    password?: string | null
    roles?: Array<number> | null
}

export type UserUpdateMe = {
    full_name?: string | null
    password?: string | null
}

export type UsersPublic = {
    data: Array<UserPublic>
    total: number
}

export type ValidationError = {
    loc: Array<string | number>
    msg: string
    type: string
}

export type LoginAccessTokenData = {
    body: BodyLoginAccessToken
    path?: never
    query?: never
    url: '/api/v1/login/access-token'
}

export type LoginAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type LoginAccessTokenError = LoginAccessTokenErrors[keyof LoginAccessTokenErrors]

export type LoginAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Token
}

export type LoginAccessTokenResponse = LoginAccessTokenResponses[keyof LoginAccessTokenResponses]

export type LoginTestTokenData = {
    body?: never
    path?: never
    query?: never
    url: '/api/v1/login/test-token'
}

export type LoginTestTokenResponses = {
    /**
     * Successful Response
     */
    200: UserPublic
}

export type LoginTestTokenResponse = LoginTestTokenResponses[keyof LoginTestTokenResponses]

export type UsersReadUsersData = {
    body?: never
    path?: never
    query?: {
        /**
         * Quick search
         */
        quick_search?: string
        skip?: number
        limit?: number
        order_by?: string | null
        order_direction?: OrderDirection
        common_search?: string
    }
    url: '/api/v1/users/'
}

export type UsersReadUsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type UsersReadUsersError = UsersReadUsersErrors[keyof UsersReadUsersErrors]

export type UsersReadUsersResponses = {
    /**
     * Successful Response
     */
    200: UsersPublic
}

export type UsersReadUsersResponse = UsersReadUsersResponses[keyof UsersReadUsersResponses]

export type UsersCreateUserData = {
    body: UserCreate
    path?: never
    query?: never
    url: '/api/v1/users/'
}

export type UsersCreateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type UsersCreateUserError = UsersCreateUserErrors[keyof UsersCreateUserErrors]

export type UsersCreateUserResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type UsersCreateUserResponse = UsersCreateUserResponses[keyof UsersCreateUserResponses]

export type UsersReadUserHomeData = {
    body?: never
    path?: never
    query?: never
    url: '/api/v1/users/home'
}

export type UsersReadUserHomeResponses = {
    /**
     * Successful Response
     */
    200: UserHome
}

export type UsersReadUserHomeResponse = UsersReadUserHomeResponses[keyof UsersReadUserHomeResponses]

export type UsersReadUserOperationLogsData = {
    body?: never
    path?: never
    query?: {
        skip?: number
        limit?: number
    }
    url: '/api/v1/users/operation-logs'
}

export type UsersReadUserOperationLogsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type UsersReadUserOperationLogsError = UsersReadUserOperationLogsErrors[keyof UsersReadUserOperationLogsErrors]

export type UsersReadUserOperationLogsResponses = {
    /**
     * Successful Response
     */
    200: OperationLogsPublic
}

export type UsersReadUserOperationLogsResponse = UsersReadUserOperationLogsResponses[keyof UsersReadUserOperationLogsResponses]

export type UsersDeleteUserMeData = {
    body?: never
    path?: never
    query?: never
    url: '/api/v1/users/me'
}

export type UsersDeleteUserMeResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type UsersDeleteUserMeResponse = UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses]

export type UsersReadUserMeData = {
    body?: never
    path?: never
    query?: never
    url: '/api/v1/users/me'
}

export type UsersReadUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserMePublic
}

export type UsersReadUserMeResponse = UsersReadUserMeResponses[keyof UsersReadUserMeResponses]

export type UsersUpdateUserMeData = {
    body: UserUpdateMe
    path?: never
    query?: never
    url: '/api/v1/users/me'
}

export type UsersUpdateUserMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type UsersUpdateUserMeError = UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors]

export type UsersUpdateUserMeResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type UsersUpdateUserMeResponse = UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses]

export type UsersRegisterUserData = {
    body: UserRegister
    path?: never
    query?: never
    url: '/api/v1/users/signup'
}

export type UsersRegisterUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type UsersRegisterUserError = UsersRegisterUserErrors[keyof UsersRegisterUserErrors]

export type UsersRegisterUserResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type UsersRegisterUserResponse = UsersRegisterUserResponses[keyof UsersRegisterUserResponses]

export type UsersDeleteUserData = {
    body?: never
    path: {
        id: number
    }
    query?: never
    url: '/api/v1/users/{id}'
}

export type UsersDeleteUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type UsersDeleteUserError = UsersDeleteUserErrors[keyof UsersDeleteUserErrors]

export type UsersDeleteUserResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type UsersDeleteUserResponse = UsersDeleteUserResponses[keyof UsersDeleteUserResponses]

export type UsersReadUserByIdData = {
    body?: never
    path: {
        id: number
    }
    query?: never
    url: '/api/v1/users/{id}'
}

export type UsersReadUserByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type UsersReadUserByIdError = UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors]

export type UsersReadUserByIdResponses = {
    /**
     * Successful Response
     */
    200: UserPublic
}

export type UsersReadUserByIdResponse = UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses]

export type UsersUpdateUserData = {
    body: UserUpdate
    path: {
        id: number
    }
    query?: never
    url: '/api/v1/users/{id}'
}

export type UsersUpdateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type UsersUpdateUserError = UsersUpdateUserErrors[keyof UsersUpdateUserErrors]

export type UsersUpdateUserResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type UsersUpdateUserResponse = UsersUpdateUserResponses[keyof UsersUpdateUserResponses]

export type RulesReadRulesData = {
    body?: never
    path?: never
    query?: {
        /**
         * Only return menus
         */
        only_menus?: boolean
        /**
         * Quick search
         */
        quick_search?: string
    }
    url: '/api/v1/rules/'
}

export type RulesReadRulesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type RulesReadRulesError = RulesReadRulesErrors[keyof RulesReadRulesErrors]

export type RulesReadRulesResponses = {
    /**
     * Successful Response
     */
    200: RuleTreesPublic
}

export type RulesReadRulesResponse = RulesReadRulesResponses[keyof RulesReadRulesResponses]

export type RulesCreateRuleData = {
    body: RuleCreate
    path?: never
    query?: never
    url: '/api/v1/rules/'
}

export type RulesCreateRuleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type RulesCreateRuleError = RulesCreateRuleErrors[keyof RulesCreateRuleErrors]

export type RulesCreateRuleResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type RulesCreateRuleResponse = RulesCreateRuleResponses[keyof RulesCreateRuleResponses]

export type RulesReadPermissionsData = {
    body?: never
    path?: never
    query?: {
        /**
         * Unassigned to rule
         */
        unassigned?: boolean
    }
    url: '/api/v1/rules/permissions'
}

export type RulesReadPermissionsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type RulesReadPermissionsError = RulesReadPermissionsErrors[keyof RulesReadPermissionsErrors]

export type RulesReadPermissionsResponses = {
    /**
     * Successful Response
     */
    200: Array<Permission>
}

export type RulesReadPermissionsResponse = RulesReadPermissionsResponses[keyof RulesReadPermissionsResponses]

export type RulesDeleteRuleData = {
    body?: never
    path: {
        id: number
    }
    query?: never
    url: '/api/v1/rules/{id}'
}

export type RulesDeleteRuleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type RulesDeleteRuleError = RulesDeleteRuleErrors[keyof RulesDeleteRuleErrors]

export type RulesDeleteRuleResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type RulesDeleteRuleResponse = RulesDeleteRuleResponses[keyof RulesDeleteRuleResponses]

export type RulesReadRuleData = {
    body?: never
    path: {
        id: number
    }
    query?: never
    url: '/api/v1/rules/{id}'
}

export type RulesReadRuleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type RulesReadRuleError = RulesReadRuleErrors[keyof RulesReadRuleErrors]

export type RulesReadRuleResponses = {
    /**
     * Successful Response
     */
    200: RuleTreePublic
}

export type RulesReadRuleResponse = RulesReadRuleResponses[keyof RulesReadRuleResponses]

export type RulesUpdateRuleData = {
    body: RuleUpdate
    path: {
        id: number
    }
    query?: never
    url: '/api/v1/rules/{id}'
}

export type RulesUpdateRuleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type RulesUpdateRuleError = RulesUpdateRuleErrors[keyof RulesUpdateRuleErrors]

export type RulesUpdateRuleResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type RulesUpdateRuleResponse = RulesUpdateRuleResponses[keyof RulesUpdateRuleResponses]

export type RolesReadRolesData = {
    body?: never
    path?: never
    query?: {
        /**
         * Quick search
         */
        quick_search?: string
    }
    url: '/api/v1/roles/'
}

export type RolesReadRolesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type RolesReadRolesError = RolesReadRolesErrors[keyof RolesReadRolesErrors]

export type RolesReadRolesResponses = {
    /**
     * Successful Response
     */
    200: RolesPublic
}

export type RolesReadRolesResponse = RolesReadRolesResponses[keyof RolesReadRolesResponses]

export type RolesCreateRoleData = {
    body: RoleCreate
    path?: never
    query?: never
    url: '/api/v1/roles/'
}

export type RolesCreateRoleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type RolesCreateRoleError = RolesCreateRoleErrors[keyof RolesCreateRoleErrors]

export type RolesCreateRoleResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type RolesCreateRoleResponse = RolesCreateRoleResponses[keyof RolesCreateRoleResponses]

export type RolesDeleteRoleData = {
    body?: never
    path: {
        id: number
    }
    query?: never
    url: '/api/v1/roles/{id}'
}

export type RolesDeleteRoleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type RolesDeleteRoleError = RolesDeleteRoleErrors[keyof RolesDeleteRoleErrors]

export type RolesDeleteRoleResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type RolesDeleteRoleResponse = RolesDeleteRoleResponses[keyof RolesDeleteRoleResponses]

export type RolesReadRoleData = {
    body?: never
    path: {
        id: number
    }
    query?: never
    url: '/api/v1/roles/{id}'
}

export type RolesReadRoleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type RolesReadRoleError = RolesReadRoleErrors[keyof RolesReadRoleErrors]

export type RolesReadRoleResponses = {
    /**
     * Successful Response
     */
    200: RolePublic
}

export type RolesReadRoleResponse = RolesReadRoleResponses[keyof RolesReadRoleResponses]

export type RolesUpdateRoleData = {
    body: RoleUpdate
    path: {
        id: number
    }
    query?: never
    url: '/api/v1/roles/{id}'
}

export type RolesUpdateRoleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type RolesUpdateRoleError = RolesUpdateRoleErrors[keyof RolesUpdateRoleErrors]

export type RolesUpdateRoleResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type RolesUpdateRoleResponse = RolesUpdateRoleResponses[keyof RolesUpdateRoleResponses]

export type OperationLogsReadOperationLogsData = {
    body?: never
    path?: never
    query?: {
        /**
         * Quick search
         */
        quick_search?: string
        skip?: number
        limit?: number
        order_by?: string | null
        order_direction?: OrderDirection
        common_search?: string
    }
    url: '/api/v1/operation-logs/'
}

export type OperationLogsReadOperationLogsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type OperationLogsReadOperationLogsError = OperationLogsReadOperationLogsErrors[keyof OperationLogsReadOperationLogsErrors]

export type OperationLogsReadOperationLogsResponses = {
    /**
     * Successful Response
     */
    200: OperationLogsPublic
}

export type OperationLogsReadOperationLogsResponse = OperationLogsReadOperationLogsResponses[keyof OperationLogsReadOperationLogsResponses]

export type OperationLogsSubmitOperationLogData = {
    body?: never
    path?: never
    query: {
        rule_name: string
    }
    url: '/api/v1/operation-logs/submit'
}

export type OperationLogsSubmitOperationLogErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type OperationLogsSubmitOperationLogError = OperationLogsSubmitOperationLogErrors[keyof OperationLogsSubmitOperationLogErrors]

export type OperationLogsSubmitOperationLogResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type OperationLogsSubmitOperationLogResponse = OperationLogsSubmitOperationLogResponses[keyof OperationLogsSubmitOperationLogResponses]

export type OperationLogsDeleteOperationLogData = {
    body?: never
    path: {
        id: string
    }
    query?: never
    url: '/api/v1/operation-logs/{id}'
}

export type OperationLogsDeleteOperationLogErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type OperationLogsDeleteOperationLogError = OperationLogsDeleteOperationLogErrors[keyof OperationLogsDeleteOperationLogErrors]

export type OperationLogsDeleteOperationLogResponses = {
    /**
     * Successful Response
     */
    200: Message
}

export type OperationLogsDeleteOperationLogResponse = OperationLogsDeleteOperationLogResponses[keyof OperationLogsDeleteOperationLogResponses]

export type OperationLogsReadOperationLogByIdData = {
    body?: never
    path: {
        id: string
    }
    query?: never
    url: '/api/v1/operation-logs/{id}'
}

export type OperationLogsReadOperationLogByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type OperationLogsReadOperationLogByIdError = OperationLogsReadOperationLogByIdErrors[keyof OperationLogsReadOperationLogByIdErrors]

export type OperationLogsReadOperationLogByIdResponses = {
    /**
     * Successful Response
     */
    200: OperationLogPublic
}

export type OperationLogsReadOperationLogByIdResponse = OperationLogsReadOperationLogByIdResponses[keyof OperationLogsReadOperationLogByIdResponses]

export type UtilsHealthCheckData = {
    body?: never
    path?: never
    query?: never
    url: '/api/v1/utils/health-check/'
}

export type UtilsHealthCheckResponses = {
    /**
     * Successful Response
     */
    200: boolean
}

export type UtilsHealthCheckResponse = UtilsHealthCheckResponses[keyof UtilsHealthCheckResponses]

export type ClientOptions = {
    baseURL: `${string}://${string}` | (string & {})
}
